/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ex3;

import java.awt.Font;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

/**
 *
 * @author Lianne Deldacan
 */
public class ex3 extends javax.swing.JFrame {
    private static final String FILEPATH = "src/ex3songs/";
    private String familyFont = "SansSerif";
    private int fontSize = 12;
    private boolean cBold = false, cItalic = false;
    /**
     * Creates new form EX3
     */
    public ex3() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        setTitle("FA1.3-Deldacan");
        try {
            readText(songComboBox.getSelectedItem().toString().concat(".txt"));
        } catch (Exception ex) {
            System.err.println("Cannot get lyrics");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sizeGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        lyricsTextArea = new javax.swing.JTextArea();
        songComboBox = new javax.swing.JComboBox<>();
        sizePanel = new javax.swing.JPanel();
        smallButton = new javax.swing.JRadioButton();
        mediumButton = new javax.swing.JRadioButton();
        largeButton = new javax.swing.JRadioButton();
        stylePanel = new javax.swing.JPanel();
        normalBox = new javax.swing.JCheckBox();
        boldBox = new javax.swing.JCheckBox();
        italicBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lyricsTextArea.setColumns(20);
        lyricsTextArea.setRows(5);
        jScrollPane1.setViewportView(lyricsTextArea);

        songComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Love Story", "You Belong With Me", "Blank Space", "Lover", "Everything has Changed", "Crazier" }));
        songComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                songComboBoxItemStateChanged(evt);
            }
        });

        sizePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Font Size"));

        sizeGroup.add(smallButton);
        smallButton.setText("Small");
        smallButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                smallButtonItemStateChanged(evt);
            }
        });

        sizeGroup.add(mediumButton);
        mediumButton.setText("Medium");
        mediumButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mediumButtonItemStateChanged(evt);
            }
        });

        sizeGroup.add(largeButton);
        largeButton.setText("Large");
        largeButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                largeButtonItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout sizePanelLayout = new javax.swing.GroupLayout(sizePanel);
        sizePanel.setLayout(sizePanelLayout);
        sizePanelLayout.setHorizontalGroup(
            sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sizePanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(largeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mediumButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smallButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        sizePanelLayout.setVerticalGroup(
            sizePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sizePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smallButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mediumButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(largeButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        stylePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Font Style"));
        stylePanel.setPreferredSize(new java.awt.Dimension(155, 145));

        normalBox.setText("Normal");
        normalBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                normalBoxItemStateChanged(evt);
            }
        });

        boldBox.setText("Bold");
        boldBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boldBoxItemStateChanged(evt);
            }
        });

        italicBox.setText("Italic");
        italicBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                italicBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout stylePanelLayout = new javax.swing.GroupLayout(stylePanel);
        stylePanel.setLayout(stylePanelLayout);
        stylePanelLayout.setHorizontalGroup(
            stylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stylePanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(stylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(italicBox)
                    .addComponent(boldBox)
                    .addComponent(normalBox))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        stylePanelLayout.setVerticalGroup(
            stylePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stylePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(normalBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boldBox)
                .addGap(12, 12, 12)
                .addComponent(italicBox)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(songComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(sizePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(stylePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(songComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sizePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stylePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void smallButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_smallButtonItemStateChanged
        fontSize = 8;
        applyFont();
        
    }//GEN-LAST:event_smallButtonItemStateChanged

    private void mediumButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mediumButtonItemStateChanged
        fontSize = 12;
        applyFont();
    }//GEN-LAST:event_mediumButtonItemStateChanged

    private void largeButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_largeButtonItemStateChanged
        fontSize = 16;
        applyFont();
    }//GEN-LAST:event_largeButtonItemStateChanged

    private void normalBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_normalBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            cBold = false;
            cItalic = false;
            boldBox.setSelected(false);
            italicBox.setSelected(false);
        }
        applyFont();
    }//GEN-LAST:event_normalBoxItemStateChanged

    private void boldBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boldBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            cBold = true;
            normalBox.setSelected(false);
        }
        else {
            cBold = false;
        }
        applyFont();
    }//GEN-LAST:event_boldBoxItemStateChanged

    private void italicBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_italicBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            cItalic = true;
            normalBox.setSelected(false);
        }
        else {
            cItalic = false;
        }
        applyFont();
    }//GEN-LAST:event_italicBoxItemStateChanged

    private void songComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_songComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                readText(songComboBox.getSelectedItem().toString().concat(".txt"));
            } catch (Exception ex) {
                System.err.println("Cannot get lyrics");;
            }
        }
    }//GEN-LAST:event_songComboBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ex3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ex3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ex3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ex3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ex3().setVisible(true);
            }
        });
    }

    private void readText(String song) throws Exception {
        lyricsTextArea.setText("");
        File file = new File(FILEPATH.concat(song));
        BufferedReader br = new BufferedReader(new FileReader(file));
        String lyrics;
        while ((lyrics = br.readLine()) != null) {
            lyricsTextArea.append(lyrics + "\n");
        }
    }
    private void applyFont() {
        if (cBold == true && cItalic == true) {
            lyricsTextArea.setFont(new Font(familyFont, Font.BOLD | Font.ITALIC, fontSize));
        }
        else if (cBold == true) {
            lyricsTextArea.setFont(new Font(familyFont, Font.BOLD, fontSize));
        }
        else if (cItalic == true) {
            lyricsTextArea.setFont(new Font(familyFont, Font.ITALIC, fontSize));
        }
        else {
            lyricsTextArea.setFont(new Font(familyFont, Font.PLAIN, fontSize));
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boldBox;
    private javax.swing.JCheckBox italicBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton largeButton;
    private javax.swing.JTextArea lyricsTextArea;
    private javax.swing.JRadioButton mediumButton;
    private javax.swing.JCheckBox normalBox;
    private javax.swing.ButtonGroup sizeGroup;
    private javax.swing.JPanel sizePanel;
    private javax.swing.JRadioButton smallButton;
    private javax.swing.JComboBox<String> songComboBox;
    private javax.swing.JPanel stylePanel;
    // End of variables declaration//GEN-END:variables
}
